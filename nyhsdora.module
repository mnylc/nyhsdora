<?php

/**
 * @file
 * Defines all the hooks this module implements.
 */

define('NYHSDORA_AMERICAN_EXPERIENCE_PID', 'islandora:american_experience');
define('NYHSDORA_MAPS_PID', 'islandora:maps');
define('NYHSDORA_BROADSIDE_PID', 'islandora:broadside');

/**
 * Implements hook_islandora_required_objects().
 */
function nyhsdora_islandora_required_objects(IslandoraTuque $connection) {
  $module_path = drupal_get_path('module', 'nyhsdora');
  $islandora_path = drupal_get_path('module', 'islandora');
  $collections = array(
    NYHSDORA_AMERICAN_EXPERIENCE_PID => array(
      'pid' => NYHSDORA_AMERICAN_EXPERIENCE_PID,
      'title' => 'Witness to the Early American Experience',
    ),
    NYHSDORA_MAPS_PID => array(
      'pid' => NYHSDORA_MAPS_PID,
      'title' => 'Maps',
      'parent' => NYHSDORA_AMERICAN_EXPERIENCE_PID,
    ),
    NYHSDORA_BROADSIDE_PID => array(
      'pid' => NYHSDORA_BROADSIDE_PID,
      'title' => 'Broadside',
      'parent' => NYHSDORA_AMERICAN_EXPERIENCE_PID,
    ),
  );
  $objects = array();
  foreach ($collections as $info) {
    $collection = $connection->repository->constructObject($info['pid']);
    $collection->owner = 'fedoraAdmin';
    $collection->label = $info['title'];
    $parent = isset($info['parent']) ? $info['parent'] : 'islandora:root';
    $collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', $parent);
    $collection->models = 'islandora:collectionCModel';

    // Collection Policy Datastream.
    $policy_datastream = $collection->constructDatastream('COLLECTION_POLICY', 'X');
    $policy_datastream->label = 'Islandora Collection Policy';
    $policy_datastream->mimetype = 'application/xml';
    $policy_datastream->setContentFromFile("$module_path/xml/nyhs_collection_policy.xml", FALSE);
    $collection->ingestDatastream($policy_datastream);

    // TN Datastream.
    $datastream = $collection->constructDatastream('TN', 'M');
    $datastream->label = 'Thumbnail';
    $datastream->mimetype = 'image/png';
    $datastream->setContentFromFile("$islandora_path/images/folder.png", FALSE);
    $collection->ingestDatastream($datastream);

    $objects[] = $collection;
  }

  return array(
    'nyhsdora' => array(
      'title' => t('New York Historical Society'),
      'objects' => $objects,
    ),
  );
}

/**
 * Implements hook_contentdm_migration_tools_migrate_item_to_mods_transform().
 */
function nyhsdora_contentdm_migration_tools_migrate_item_to_mods_transform_alter(&$transform, array $data, &$params) {
  $path = drupal_realpath(drupal_get_path('module', 'nyhsdora') . '/transforms/cdm-api-export2MODS.xsl');
  $transform = $path;

  $alias_map = array(
    'p16124coll1' => 'AmericanManuscripts',
    'p16694coll47' => 'CivilWarTreasures',
    'p15052coll5' => 'SlaveryManuscripts',
    'NYHSR01' => 'NYHSQuarterly',
    'p16124coll2' => 'PhotosOfNYC',
  );
  $params['current-collection'] = isset($alias_map[$params['alias']]) ?
    $alias_map[$params['alias']] :
    FALSE;
}

/**
 * Implements hook_contentdm_migration_tools_migrate_item().
 */
function nyhsdora_contentdm_migration_tools_migrate_item_alter(AbstractObject &$object, AbstractObject $parent, array $data, $update) {
  if (isset($object['MODS'])) {
    $dom = new DOMDocument();
    $dom->loadXML($object['MODS']->content);
    $dom_xpath = new DOMXPath($dom);
    $dom_xpath->registerNamespace('mods', 'http://www.loc.gov/mods/v3');
    $dom_xpath->registerNamespace('cdm', 'http://oclc.org/cdm');
    $full_text = $dom_xpath->evaluate('string(/mods:mods/mods:extension/cdm:fulltext/text())');
    if (!empty($full_text)) {
      module_load_include('inc', 'islandora', 'includes/utlities');
      $ds = $object->constructDatastream('FULL_TEXT', 'M');
      $ds->label = 'FULL_TEXT';
      $ds->mimetype = 'text/plain';
      $ds->content = islandora_sanitize_input_for_valid_xml($full_text);
      $object->ingestDatastream($ds);
    }
  }
}

/**
 * Implements hook_islandora_datastream_alter().
 */
function nyhsdora_islandora_datastream_alter(AbstractObject $object, AbstractDatastream $datastream, &$context) {
  if ($datastream->id == 'TN' && ($context['action'] == 'ingest' || $context['action'] == 'modify')) {
    nyhsdora_update_collection_tn($object, $datastream);
  }
}

/**
 * Updates the collection TN on objects who came from a CDM migration.
 *
 * @param AbstractObject $object
 *   An AbstractObject representing an object within Fedora.
 * @param AbstractDatastream $datastream
 *   An AbstractDatastream representing a thumbnail within Fedora.
 */
function nyhsdora_update_collection_tn(AbstractObject $object, AbstractDatastream $datastream) {
  // If the parent isn't a collection object bail out straight away.
  $parent_rels = $object->relationships->get(FEDORA_RELS_EXT_URI, 'isMemberOfCollection');
  if (!empty($parent_rels)) {
    $parent_rels = reset($parent_rels);
    $parent = islandora_object_load($parent_rels['object']['value']);
    if ($parent) {
      // See if it's also a CDM object.
      $cdm_rels = $parent->relationships->get(CONTENTDM_RELS_EXT_URI, 'alias');
      if (!empty($cdm_rels)) {
        // Need to determine if the parent has the default Islandora folder TN,
        // otherwise it has already been updated.
        if (isset($parent['TN'])) {
          $tn_size = $parent['TN']->size;
          $obj_tn_size = strlen($datastream->content);
          $static_md5sum = 'cb971815171163beb105f8074eae1bde';
          // Default Islandora folder size is 5137.
          if ($tn_size == 5137 && md5($parent['TN']->content) == $static_md5sum) {
            // Ensure that the child TN is actually different too.
            if (!($obj_tn_size == 5137 && md5($datastream->content) == $static_md5sum)) {
              $parent['TN']->content = $datastream->content;
              if ($parent['TN']->mimetype != $datastream->mimetype) {
                $parent['TN']->mimetype = $datastream->mimetype;
              }
            }
          }
        }
        else {
          $parent_datastream = $parent->constructDatastream('TN', 'M');
          $parent_datastream->label = 'Thumbnail';
          $parent_datastream->mimetype = $datastream->mimetype;
          $parent_datastream->content = $datastream->content;
          $parent->ingestDatastream($parent_datastream);
        }
      }
    }
  }
}
